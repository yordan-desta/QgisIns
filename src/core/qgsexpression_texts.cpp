#include "qgsexpression.h"
#include <QCoreApplication>

QHash<QString, QString> QgsExpression::gFunctionHelpTexts;

void QgsExpression::initFunctionHelp()
{
  if( !gFunctionHelpTexts.isEmpty() )
    return;

  gFunctionHelpTexts.insert( "$area", QCoreApplication::translate( "function_help", "<h3>$area function</h3>\n"
"Returns the area size of the current feature.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$area</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$area &rarr; 42</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$atlasfeature", QCoreApplication::translate( "function_help", "<h3>$atlasfeature function</h3>\n"
"In atlas generation, returns the current feature that is iterated over on the coverage layer. This can be used with the 'attribute' function\n"
"to return attribute values from the current atlas feature.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$atlasfeature</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>attribute( $atlasfeature, 'name' ) &rarr; returns value stored in 'name' attribute for the current atlas feature</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$atlasfeatureid", QCoreApplication::translate( "function_help", "<h3>$atlasfeatureid function</h3>\n"
"Returns the feature id of the current row while using atlas.\n"
"This enables you to use features of atlas in rules \n"
"and for example show or hide features based on their id.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$atlasfeatureid</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$atlasfeatureid = $id</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$atlasgeometry", QCoreApplication::translate( "function_help", "<h3>$atlasgeometry function</h3>\n"
"Returns the geometry of the current feature iterated in atlas.\n"
"Can be used for rule based display of geometry when using atlas.\n"
"For example to only show geometries of other layers when their geometry \n"
"intersects the iterated geometry of features using atlas.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$atlasgeometry</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> intersects(  $atlasgeometry,  $geometry ) </pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$currentfeature", QCoreApplication::translate( "function_help", "<h3>$currentfeature function</h3>\n"
"Returns the current feature being evaluated. This can be used with the 'attribute' function\n"
"to evaluate attribute values from the current feature.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$currentfeature</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>attribute( $currentfeature, 'name' ) &rarr; returns value stored in 'name' attribute for the current feature</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$feature", QCoreApplication::translate( "function_help", "<h3>$feature function</h3>\n"
"In atlas generation, returns the current feature number that is iterated over on the coverage layer.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$feature</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$feature &rarr; 2</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$geometry", QCoreApplication::translate( "function_help", "<h3>$geometry function</h3>\n"
"Returns the geometry of the current feature. Can be used for processing with other functions.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$geometry</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomToWKT( $geometry ) &rarr; POINT(6 50)</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$id", QCoreApplication::translate( "function_help", "<h3>$id function</h3>\n"
"Returns the feature id of the current row.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$id</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$id &rarr; 42</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$length", QCoreApplication::translate( "function_help", "<h3>$length function</h3>\n"
"Returns the length of the current feature.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$length</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$length &rarr; 42.4711</pre>\n"
"") );
  gFunctionHelpTexts.insert( "$map", QCoreApplication::translate( "function_help", "<h3>$map function</h3>\n"
"Returns the id of the current map item if the map is being drawn in a composition, or \"canvas\" if the map is being\n"
"drawn within the main QGIS window.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$map</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<pre>$map &rarr; \"overview_map\" (within a composer item)<br />\n"
"$map &rarr; \"canvas\" (within the main QGIS main canvas)</pre>\n"
"\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$now", QCoreApplication::translate( "function_help", "<h3>$now function</h3>\n"
"Returns the current date and time\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$now</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$now &rarr; 2012-07-22T13:24:57</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$numfeatures", QCoreApplication::translate( "function_help", "<h3>$numfeatures function</h3>\n"
"In atlas generation, returns the total number of features within the coverage layer.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$numfeatures</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$numfeatures &rarr; 42</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$numpages", QCoreApplication::translate( "function_help", "<h3>$numpages function</h3>\n"
"Returns the total number of pages in the composition.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$numpages</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$numpages &rarr; 42</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$page", QCoreApplication::translate( "function_help", "<h3>$page function</h3>\n"
"Returns the current page number within a composition.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$page</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$page &rarr; 2</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$perimeter", QCoreApplication::translate( "function_help", "<h3>$perimeter function</h3>\n"
"Returns the perimeter length of the current feature.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$perimeter</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$perimeter &rarr; 42</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$pi", QCoreApplication::translate( "function_help", "<h3>$pi constant</h3>\n"
"Returns pi as value for calculations\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$pi</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$pi &rarr; 3.14159265358979</pre>\n"
"") );
  gFunctionHelpTexts.insert( "$rownum", QCoreApplication::translate( "function_help", "<h3>$rownum function</h3>\n"
"Returns the number of the current row.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$rownum</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$rownum &rarr; 4711</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$scale", QCoreApplication::translate( "function_help", "<h3>$scale function</h3>\n"
"Returns the current scale of the map canvas.\n"
"<br>\n"
"Note: This function is only available in some contexts and will be 0 otherwise. \n"
"<h4>Syntax</h4>\n"
"<code>$scale</code><br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>$scale &rarr; 10000</code><br>\n"
"\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$uuid", QCoreApplication::translate( "function_help", "<h3>$uuid function</h3>\n"
"Generates a Universally Unique Identifier (UUID) for each row using the Qt\n"
"<a href='http://qt-project.org/doc/qt-4.8/quuid.html#createUuid'>QUuid::createUuid</a>\n"
"method.  Each UUID is 38 characters long.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$uuid</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$uuid &rarr; {0bd2f60f-f157-4a6d-96af-d4ba4cb366a1}</pre>\n"
"") );
  gFunctionHelpTexts.insert( "$x", QCoreApplication::translate( "function_help", "<h3>$x function</h3>\n"
"Returns the x coordinate of the current feature.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$x</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$x &rarr; 42</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "$y", QCoreApplication::translate( "function_help", "<h3>$y function</h3>\n"
"Returns the y coordinate of the current feature.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>$y</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre>$y &rarr; 42</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "AND", QCoreApplication::translate( "function_help", "<h3>AND logical operator</h3>\n"
"Returns 1 when condition a and b are true.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre> condition a AND condition b </pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> 4 = 2+2 AND 1 = 1  &rarr; returns 1 </pre>\n"
"<pre> 4 = 2+2 AND 1 = 2  &rarr; returns 0 </pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "CASE", QCoreApplication::translate( "function_help", "<h3>CASE expression</h3>\n"
"A conditional expression that can be used to evaluate multiple expressions and\n"
"return a result.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>\n"
"     CASE\n"
"        WHEN <i>condition</i> THEN <i>result</i>\n"
"        [ ...n ]\n"
"        [ ELSE <i>result</i> ]\n"
"     END\n"
"</pre>\n"
"[ ] marks optional components\n"
"\n"
"<h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  WHEN condition</i> - The condition expression to evaluate. <br>\n"
"<i>  THEN result</i> - If <i>condition</i> evaluates to True then <i>result</i> is evaluated and returned. <br>\n"
"<i>  ELSE result</i> - If none of the above conditions evaluated to True then <i>result</i> is evaluated and returned. <br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<pre>\n"
"    CASE\n"
"        WHEN <i>\"column\" IS NULL</i> THEN <i>'None'</i>\n"
"    END\n"
"</pre>\n"
"") );
  gFunctionHelpTexts.insert( "CASE ELSE", QCoreApplication::translate( "function_help", "<h3>CASE expression</h3>\n"
"A conditional expression that can be used to evaluate multiple expressions and\n"
"return a result.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>\n"
"     CASE\n"
"        WHEN <i>condition</i> THEN <i>result</i>\n"
"        [ ...n ]\n"
"        [ ELSE <i>result</i> ]\n"
"     END\n"
"</pre>\n"
"[ ] marks optional components\n"
"\n"
"<h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  WHEN condition</i> - The condition expression to evaluate. <br>\n"
"<i>  THEN result</i> - If <i>condition</i> evaluates to True then <i>result</i> is evaluated and returned. <br>\n"
"<i>  ELSE result</i> - If none of the above conditions evaluated to True then <i>result</i> is evaluated and returned. <br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<pre>\n"
"    CASE\n"
"        WHEN <i>\"column\" IS NULL</i> THEN <i>'None'</i>\n"
"        ELSE <i>\"column\"</i>\n"
"    END\n"
"</pre>\n"
"") );
  gFunctionHelpTexts.insert( "Color", QCoreApplication::translate( "function_help", "\n"
"<h3>Color Group</h3>\n"
"This group contains functions for manipulating colors\n"
"") );
  gFunctionHelpTexts.insert( "Conditionals", QCoreApplication::translate( "function_help", "<h3>Conditionals Group</h3>\n"
"This group contains functions to handle conditional checks in expressions.\n"
"") );
  gFunctionHelpTexts.insert( "Conditions", QCoreApplication::translate( "function_help", "<h3>Conditions Group</h3>\n"
"This group contains functions that operate on condition.\n"
"") );
  gFunctionHelpTexts.insert( "Conversions", QCoreApplication::translate( "function_help", "<h3>Conversions Group</h3>\n"
"This group contains functions to convert on data type to another e.g string to integer, integer to string.\n"
"") );
  gFunctionHelpTexts.insert( "Date and Time", QCoreApplication::translate( "function_help", "<h3>Date and Time Group</h3>\n"
"This group contains functions for handling date and time data.\n"
"") );
  gFunctionHelpTexts.insert( "Field", QCoreApplication::translate( "function_help", "<h3>Field</h3>\n"
"Double click to add field name to expression string.\n"
"<br><br>\n"
"Right-Click on field name to open context menu sample value loading options.\n"
"\n"
"<p><h4>Note:</h4>\n"
"Loading field values from WFS layers isn't supported, before the layer is\n"
"actually inserted, ie. when building queries.\n"
"</p>\n"
"") );
  gFunctionHelpTexts.insert( "Fields and Values", QCoreApplication::translate( "function_help", "<h3>Fields and Values</h3>\n"
"Contains a list of fields from the layer.  Sample values can also be accessed via right-click.\n"
"<br><br>\n"
"Select the field name from the list then right-click to access context menu with options to load sample values from the selected field.\n"
"\n"
"<p><h4>Note:</h4>\n"
"Loading field values from WFS layers isn't supported, before the layer is\n"
"actually inserted, ie. when building queries.\n"
"</p>\n"
"") );
  gFunctionHelpTexts.insert( "Geometry", QCoreApplication::translate( "function_help", "<h3>Geometry Group</h3>\n"
"This group contains functions that operate on geometry objects e.g length, area.\n"
"") );
  gFunctionHelpTexts.insert( "ILIKE", QCoreApplication::translate( "function_help", "<h3>ILIKE expression</h3>\n"
"Returns 1 if the first parameter matches case-insensitive the supplied pattern. LIKE can be used instead of ILIKE to make the match case-sensitive. Works with numbers also.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>string/number ILIKE pattern</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> 'A' ILIKE 'A'  &rarr; returns 1 </pre>\n"
"<pre> 'A' ILIKE 'a'  &rarr; returns 1 </pre>\n"
"<pre> 'A' ILIKE 'B'  &rarr; returns 0 </pre>\n"
"") );
  gFunctionHelpTexts.insert( "IN", QCoreApplication::translate( "function_help", "<h3>IN expression</h3>\n"
"Returns 1 if value is found within a list of values\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>'a' IN ('a', 'b')</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> 'A' IN ('A','B\") &rarr; returns 1 </pre>\n"
"<pre> 'A' IN ('C','B\") &rarr; returns 0 </pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "IS", QCoreApplication::translate( "function_help", "<h3>IS expression</h3>\n"
"Returns 1 if a is the same as b.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>a IS b</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> 'A' IS 'A'  &rarr; returns 1 </pre>\n"
"<pre> 'A' IS 'a'  &rarr; returns 0 </pre>\n"
"<pre> 4 IS 4      &rarr; returns 1 </pre>\n"
"<pre> 4 IS 2+2    &rarr; returns 1 </pre>\n"
"<pre> 4 IS 2      &rarr; returns 0 </pre>\n"
"<pre> $geometry IS NULL  &rarr; returns 0, if your geometry is not NULL</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "LIKE", QCoreApplication::translate( "function_help", "<h3>LIKE expression</h3>\n"
"Returns 1 if the first parameter matches the supplied pattern. Works with numbers also.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>string/number LIKE pattern</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> 'A' LIKE 'A'  &rarr; returns 1 </pre>\n"
"<pre> 'A' LIKE 'a'  &rarr; returns 0 </pre>\n"
"<pre> 'A' LIKE 'B'  &rarr; returns 0 </pre>\n"
"") );
  gFunctionHelpTexts.insert( "Math", QCoreApplication::translate( "function_help", "<h3>Math Group</h3>\n"
"This group contains math functions e.g square root, sin and cos\n"
"") );
  gFunctionHelpTexts.insert( "NOT", QCoreApplication::translate( "function_help", "<h3>NOT</h3>\n"
"Returns 1 if a is not the same as b.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre> a NOT b </pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> 'a' IS NOT 'b'  &rarr; returns 1 </pre>\n"
"<pre> 'a' IS NOT 'a'  &rarr; returns 0 </pre>\n"
"<pre> 4 IS NOT 2+2    &rarr; returns 0 </pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "OR", QCoreApplication::translate( "function_help", "<h3>OR logical operator</h3>\n"
"Returns 1 when condition a or b is true.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre> condition a OR condition b </pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"None\n"
"\n"
"<h4>Example</h4>\n"
"<pre> 4 = 2+2 OR 1 = 1  &rarr; returns 1 </pre>\n"
"<pre> 4 = 2+2 OR 1 = 2  &rarr; returns 1 </pre>\n"
"<pre> 4 = 2   OR 1 = 2  &rarr; returns 0 </pre>\n"
"") );
  gFunctionHelpTexts.insert( "Operators", QCoreApplication::translate( "function_help", "<h3>Operators Group</h3>\n"
"This group contains operators e.g + - * \n"
"") );
  gFunctionHelpTexts.insert( "Record", QCoreApplication::translate( "function_help", "<h3>Record Group</h3>\n"
"This group contains functions that operate on record identifiers.\n"
"") );
  gFunctionHelpTexts.insert( "String", QCoreApplication::translate( "function_help", "<h3>String Group</h3>\n"
"This group contains functions that operate on strings e.g replace, convert to upper case.\n"
"") );
  gFunctionHelpTexts.insert( "abs", QCoreApplication::translate( "function_help", "<h3>abs() function</h3>\n"
"Returns the absolute value of a number.<br>\n"
"\n"
"\n"
"<h4>Syntax</h4>\n"
"abs(<i>value</i>)<br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>value</code> - a number.<br>\n"
"\n"
"<h4>Example</h4>\n"
"<code>abs(-2) &rarr; 2</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "acos", QCoreApplication::translate( "function_help", "<h3>acos() function</h3>\n"
"Returns arcuscosinus of a value in radians.\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     acos(<i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; cos of an angle.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     acos(0.5) &rarr; 1.0471975511966</p>\n"
"") );
  gFunctionHelpTexts.insert( "age", QCoreApplication::translate( "function_help", "<h3>age() function</h3>\n"
"Returns the difference between two dates.\n"
"<br><br>\n"
"The difference is returned as a <code>Interval</code> \n"
"and needs to be used with one of the following functions\n"
"in order to extract useful information:\n"
"<ul>\n"
"<li><code>year</code>\n"
"<li><code>month</code>\n"
"<li><code>week</code>\n"
"<li><code>day</code>\n"
"<li><code>hour</code>\n"
"<li><code>minute</code>\n"
"<li><code>second</code>\n"
"</ul>\n"
"<h4>Syntax</h4>\n"
"<code>age(string,string)</code><br>\n"
"<code>age(datetime,datetime)</code><br>\n"
"<code>age(string,datetime)</code><br>\n"
"<code>age(datetime,string)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string. A string in date format.\n"
"<br>\n"
"<code>datetime</code> - is date or datetime. A date or datetime type.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>age('2012-05-12','2012-05-2') &rarr; Interval</code><br>\n"
"use <code>day</code> to extract number of days<br>\n"
"<code>day(age('2012-05-12','2012-05-2')) &rarr; 10</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "asin", QCoreApplication::translate( "function_help", "<h3>asin() function</h3>\n"
"Returns arcussinus of a value in radians.\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     asin(<i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; sin of an angle.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     asin(1.0) &rarr; 1.5707963267949</p>\n"
"") );
  gFunctionHelpTexts.insert( "atan", QCoreApplication::translate( "function_help", "<h3>atan() function</h3>\n"
"Returns arcustanget of a value in radians.\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     atan(<i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; tan of an angle.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     atan(0.5) &rarr; 0.463647609000806</p>\n"
"") );
  gFunctionHelpTexts.insert( "atan2", QCoreApplication::translate( "function_help", "<h3>atan2() function</h3>\n"
"Returns arcustangens of y/x using the signs of the two \n"
"arguments to determine the quadrant of the result\n"
"\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     atan2(<i>real</i>, <i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; y coordinate difference<br>\n"
"<i>real</i> &rarr; x coordinate difference</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     atan2(1.0, 1.732) &rarr; 0.523611477769969</p>\n"
"") );
  gFunctionHelpTexts.insert( "attribute", QCoreApplication::translate( "function_help", "<h3>attribute function</h3>\n"
"Returns the value of a specified attribute from a feature.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>attribute( feature, attribute_name )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"feature &rarr; a feature<br />\n"
"attribute_name &rarr; name of attribute to be returned\n"
"\n"
"<h4>Example</h4>\n"
"<pre>attribute( $currentfeature, 'name' ) &rarr; returns value stored in 'name' attribute for the current feature</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "bbox", QCoreApplication::translate( "function_help", "<h3>bbox function</h3>\n"
"Returns 1 if the geometries spatially intersect the bounding box defined and 0 if they don't.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>bbox( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"b &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre>bbox( geomFromWKT( 'POINT(4 5)' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' )) &rarr; returns 1</pre>\n"
"<pre>bbox( geomFromWKT( 'POINT(6 5)' ) , geomFromWKT( 'POLYGON((3 3 , 4 4 , 5 5, 3 3))' )) &rarr; returns 0</pre>\n"
"") );
  gFunctionHelpTexts.insert( "bounds", QCoreApplication::translate( "function_help", "<h3>bounds function</h3>\n"
"Returns a geometry which represents the bounding box of an input geometry. Calculations are in the Spatial Reference System of this Geometry. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>bounds(geom)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geom &rarr; a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> bounds($geometry) &rarr; returns bounding box of $geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "bounds_height", QCoreApplication::translate( "function_help", "<h3>bounds_height function</h3>\n"
"Returns the height of the bounding box of a geometry. Calculations are in the Spatial Reference System of this Geometry. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>bounds_height(geom)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geom &rarr; a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> bounds_height($geometry) &rarr; returns height of bounding box of $geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "bounds_width", QCoreApplication::translate( "function_help", "<h3>bounds_width function</h3>\n"
"Returns the width of the bounding box of a geometry. Calculations are in the Spatial Reference System of this Geometry. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>bounds_width(geom)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geom &rarr; a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> bounds_width($geometry) &rarr; returns width of bounding box of $geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "buffer", QCoreApplication::translate( "function_help", "<h3>buffer function</h3>\n"
"Returns a geometry that represents all points whose distance from this geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>buffer(a, b)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"b &rarr; distance for the buffer\n"
"\n"
"<h4>Example</h4>\n"
"<pre> buffer($geometry, 10.5 ) &rarr; returns a polygon</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "ceil", QCoreApplication::translate( "function_help", "<h3>ceil() function</h3>\n"
"Rounds a number upwards.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>ceil(value)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>value</code> - a number.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>ceil(4.9) &rarr; 5</code><br>\n"
"<code>ceil(-4.9) &rarr; -4</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "centroid", QCoreApplication::translate( "function_help", "<h3>centroid function</h3>\n"
"Returns the geometric center of a geometry.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>centroid(a)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"b &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> centroid($geometry) &rarr; returns a point geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "clamp", QCoreApplication::translate( "function_help", "<h3>clamp() function</h3>\n"
"Restricts an input value to a specified range.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     clamp(<i>minimum</i>,<i>input</i>,<i>maximum</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  minimum</i> &rarr; The smallest value <i>input</i> is allowed to take.<br>\n"
"<i>  input</i> &rarr; a value which will be restricted to the range specified by <i>minimum</i> and <i>maximum</i>.<br>\n"
"<i>  maximum</i> &rarr; The largest value <i>input</i> is allowed to take.<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     clamp(1,5,10) &rarr; 5 (<i>input</i> is between 1 and 10 so is returned unchanged)<br>\n"
"     clamp(1,0,10) &rarr; 1 (<i>input</i> is less than minimum value of 1, so function returns 1)<br>\n"
"     clamp(1,11,10) &rarr; 10 (<i>input</i> is greater than maximum value of 10, so function returns 10)<br>\n"
"     \n"
"     \n"
"") );
  gFunctionHelpTexts.insert( "coalesce", QCoreApplication::translate( "function_help", "<h3>coalesce() function</h3>\n"
"Returns the first non-NULL value from the expression list.\n"
"<br>\n"
"This function can take any number of arguments.\n"
"<h4>Syntax</h4>\n"
"<code>coalesce(expression1, expression2 ...)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>expression</code> - any valid expression or value, irregardless of type.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>coalesce(NULL, 2) &rarr; 2</code><br>\n"
"<code>coalesce(NULL, 2, 3) &rarr; 2</code><br>\n"
"<code>coalesce(7, NULL, 3*2) &rarr; 7</code><br><br>\n"
"<code>coalesce(\"fieldA\", \"fallbackField\", 'ERROR') &rarr; value of fieldA if it is non-NULL\n"
" else the value of \"fallbackField\" or the string 'ERROR' if both are NULL</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "color_cmyk", QCoreApplication::translate( "function_help", "\n"
"<h3>color_cmyk() function</h3>\n"
"Returns a string representation of a color based on its cyan, magenta, yellow and black components\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     color_cmyk(<i>cyan, magenta, yellow, black</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  cyan</i> &rarr; the cyan component of the color, as a percentage integer value from 0 to 100.<br>\n"
"<i>  magenta</i> &rarr; the magenta component of the color, as a percentage integer value from 0 to 100.<br>\n"
"<i>  yellow</i> &rarr; the yellow component of the color, as a percentage integer value from 0 to 100.<br>\n"
"<i>  black</i> &rarr; the black component of the color, as a percentage integer value from 0 to 100.<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     color_cmyk(100,50,0,10) &rarr; '0,115,230'</p>\n"
"") );
  gFunctionHelpTexts.insert( "color_cmyka", QCoreApplication::translate( "function_help", "\n"
"<h3>color_cmyka() function</h3>\n"
"Returns a string representation of a color based on its cyan, magenta, yellow, black and alpha (transparency) components\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     color_cmyka(<i>cyan, magenta, yellow, black, alpha</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  cyan</i> &rarr; the cyan component of the color, as a percentage integer value from 0 to 100.<br>\n"
"<i>  magenta</i> &rarr; the magenta component of the color, as a percentage integer value from 0 to 100.<br>\n"
"<i>  yellow</i> &rarr; the yellow component of the color, as a percentage integer value from 0 to 100.<br>\n"
"<i>  black</i> &rarr; the black component of the color, as a percentage integer value from 0 to 100.<br>\n"
"<i>  alpha</i> &rarr; the alpha component as an integer value from 0 (completely transparent) to 255 (opaque).<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     color_cmyka(100,50,0,10,200) &rarr; '0,115,230,200'</p>\n"
"") );
  gFunctionHelpTexts.insert( "color_hsl", QCoreApplication::translate( "function_help", "<h3>color_hsl() function</h3>\n"
"Returns a string representation of a color based on its hue, saturation, and lightness attributes\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     color_hsl(<i>hue, saturation, lightness</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  hue</i> &rarr; the hue of the color, as an integer value from 0 to 360.<br>\n"
"<i>  saturation</i> &rarr; the saturation percentage of the color as an integer value from 0 to 100.<br>\n"
"<i>  lightness</i> &rarr; the lightness percentage of the color as an integer value from 0 to 100.<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     color_hsl(100,50,70) &rarr; '166,217,140'</p>\n"
"") );
  gFunctionHelpTexts.insert( "color_hsla", QCoreApplication::translate( "function_help", "<h3>color_hsla() function</h3>\n"
"Returns a string representation of a color based on its hue, saturation, lightness and alpha (transparency) attributes\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     color_hsla(<i>hue, saturation, lightness, alpha</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  hue</i> &rarr; the hue of the color, as an integer value from 0 to 360.<br>\n"
"<i>  saturation</i> &rarr; the saturation percentage of the color as an integer value from 0 to 100.<br>\n"
"<i>  lightness</i> &rarr; the lightness percentage of the color as an integer value from 0 to 100.<br>\n"
"<i>  alpha</i> &rarr; the alpha component as an integer value from 0 (completely transparent) to 255 (opaque).<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     color_hsla(100,50,70,200) &rarr; '166,217,140,200'</p>\n"
"") );
  gFunctionHelpTexts.insert( "color_hsv", QCoreApplication::translate( "function_help", "<h3>color_hsv() function</h3>\n"
"Returns a string representation of a color based on its hue, saturation, and value attributes\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     color_hsv(<i>hue, saturation, value</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  hue</i> &rarr; the hue of the color, as an integer value from 0 to 360.<br>\n"
"<i>  saturation</i> &rarr; the saturation percentage of the color as an integer value from 0 to 100.<br>\n"
"<i>  value</i> &rarr; the value percentage of the color as an integer from 0 to 100.<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     color_hsv(40,100,100) &rarr; '255,170,0'</p>\n"
"") );
  gFunctionHelpTexts.insert( "color_hsva", QCoreApplication::translate( "function_help", "<h3>color_hsva() function</h3>\n"
"Returns a string representation of a color based on its hue, saturation, value and alpha (transparency) attributes\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     color_hsva(<i>hue, saturation, value, alpha</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  hue</i> &rarr; the hue of the color, as an integer value from 0 to 360.<br>\n"
"<i>  saturation</i> &rarr; the saturation percentage of the color as an integer value from 0 to 100.<br>\n"
"<i>  value</i> &rarr; the value percentage of the color as an integer from 0 to 100.<br>\n"
"<i>  alpha</i> &rarr; the alpha component as an integer value from 0 (completely transparent) to 255 (opaque).<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     color_hsva(40,100,100,200) &rarr; '255,170,0,200'</p>\n"
"") );
  gFunctionHelpTexts.insert( "color_rgb", QCoreApplication::translate( "function_help", "\n"
"<h3>color_rgb() function</h3>\n"
"Returns a string representation of a color based on its red, green, and blue components\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     color_rgb(<i>red, green, blue</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  red</i> &rarr; the red component as an integer value from 0 to 255.<br>\n"
"<i>  green</i> &rarr; the green component as an integer value from 0 to 255.<br>\n"
"<i>  blue</i> &rarr; the blue component as an integer value from 0 to 255.<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     color_rgb(255,127,0) &rarr; '255,127,0'</p>\n"
"") );
  gFunctionHelpTexts.insert( "color_rgba", QCoreApplication::translate( "function_help", "\n"
"<h3>color_rgba() function</h3>\n"
"Returns a string representation of a color based on its red, green, blue, and alpha (transparency) components\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     color_rgba(<i>red, green, blue, alpha</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  red</i> &rarr; the red component as an integer value from 0 to 255.<br>\n"
"<i>  green</i> &rarr; the green component as an integer value from 0 to 255.<br>\n"
"<i>  blue</i> &rarr; the blue component as an integer value from 0 to 255.<br>\n"
"<i>  alpha</i> &rarr; the alpha component as an integer value from 0 (completely transparent) to 255 (opaque).<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     color_rgba(255,127,0,200) &rarr; '255,127,0,200'</p>\n"
"") );
  gFunctionHelpTexts.insert( "combine", QCoreApplication::translate( "function_help", "<h3>combine function</h3>\n"
"Returns the combination of geometry a and geometry b.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>combine( geometry a , geometry b)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geometry &rarr; geometry\n"
"geometry &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomToWKT( combine( geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5 )' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4,  2 1 )' ))  )    &rarr; returns MULTILINESTRING((4 4, 2 1), (3 3, 4 4), (4 4, 5 5)) </pre>\n"
"<pre> geomToWKT( combine( geomFromWKT( 'LINESTRING(3 3 , 4 4  )' ) , geomFromWKT( 'LINESTRING(3 3 , 6 6,  2 1 )' ))  )  &rarr; returns LINESTRING(3 3, 4 4, 6 6, 2 1) </pre>\n"
"") );
  gFunctionHelpTexts.insert( "concat", QCoreApplication::translate( "function_help", "<h3>concat() function</h3>\n"
"Concatenates several strings to one.\n"
"\n"
"<h4>Syntax</h4>\n"
"     concat(<i>string<i>[,<i>string</i>...])\n"
"\n"
"<h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  a string.<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     concat('a','b','c','d','e') &rarr; 'abcde'\n"
"") );
  gFunctionHelpTexts.insert( "contains", QCoreApplication::translate( "function_help", "<h3>contains function</h3>\n"
"Returns true if and only if no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>contains( geometry a , geometry b)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geometry &rarr; geometry\n"
"geometry &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> contains( geomFromWKT( 'POLYGON((0 0 , 0 1 , 1 1 , 1 0 , 0 0 ))' ) , geomFromWKT( 'POINT( 0.5 0.5 )' ))    &rarr; returns 1</pre>\n"
"<pre> contains( geomFromWKT( 'POLYGON((0 0 , 0 1 , 1 1 , 1 0 , 0 0 ))' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ))          &rarr; returns 0</pre>\n"
"") );
  gFunctionHelpTexts.insert( "convexHull", QCoreApplication::translate( "function_help", "<h3>convexHull function</h3>\n"
"Returns the convex hull of a geometry. It represents the minimum convex geometry that encloses all geometries within the set.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>convexHull( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"a &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre>  geomToWKT( convexHull( geomFromWKT( 'LINESTRING(3 3 , 4 4 , 4 10)' )) )   &rarr; returns POLYGON((3 3,4 10,4 4,3 3)) </pre>\n"
"") );
  gFunctionHelpTexts.insert( "cos", QCoreApplication::translate( "function_help", "<h3>cos() function</h3>\n"
"Returns cosinus of an angle.\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     cos(<i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; angle in radians.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     cos(1.571) &rarr; 0.000796326710733263</p>\n"
"") );
  gFunctionHelpTexts.insert( "crosses", QCoreApplication::translate( "function_help", "<h3>crosses function</h3>\n"
"Returns 1 if the supplied geometries have some, but not all, interior points in common.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>crosses( $geometry , $geometry)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geometry &rarr; geometry\n"
"geometry &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> crosses( geomFromWKT( 'LINESTRING(3 5 , 4 4 , 5 3)' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ))    &rarr; returns 1</pre>\n"
"<pre> crosses( geomFromWKT( 'POINT(4 5)' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ))             &rarr; returns 0</pre>\n"
"") );
  gFunctionHelpTexts.insert( "day", QCoreApplication::translate( "function_help", "<h3>day() function</h3>\n"
"Extract the day from a date, or the number of days\n"
"from a <code>Interval</code>\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>day(date)</code><br>\n"
"<code>day(Interval)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>date</code> - is date or datetime. The date to extract the day from.\n"
"<br>\n"
"<code>Interval</code> - is Interval. The Interval to return the number of days from.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>day('2012-05-12') &rarr; 12</code><br>\n"
"<code>day(tointerval('3 days')) &rarr; 3</code><br>\n"
"<code>day(age('2012-01-01','2010-01-01')) &rarr; 730</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "difference", QCoreApplication::translate( "function_help", "<h3>difference function</h3>\n"
"Returns a geometry that represents that part of geometry a that does not intersect with geometry b.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>difference( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geometry &rarr; geometry\n"
"geometry &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomToWKT( difference( geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4)' ))  )   &rarr; returns LINESTRING(4 4, 5 5)</pre>\n"
"") );
  gFunctionHelpTexts.insert( "disjoint", QCoreApplication::translate( "function_help", "<h3>disjoint function</h3>\n"
"Returns 1 if the geometries do not \"spatially intersect\" - if they do not share any space together. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>disjoint( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"b &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> disjoint( geomFromWKT( 'POLYGON((0 0 , 0 1 , 1 1 , 1 0 , 0 0 ))' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' )) &rarr; returns 1</pre>\n"
"<pre> disjoint( geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ) , geomFromWKT( 'POINT(4 4)' ))                              &rarr; returns 0</pre>\n"
"") );
  gFunctionHelpTexts.insert( "distance", QCoreApplication::translate( "function_help", "<h3>distance function</h3>\n"
" Returns the minimum distance (based on spatial ref) between two geometries in projected units.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>distance( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"b &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> distance( geomFromWKT( 'POINT(4 4)' ) , geomFromWKT( 'POINT(4 8)' ))    &rarr; returns 4</pre>\n"
"") );
  gFunctionHelpTexts.insert( "exp", QCoreApplication::translate( "function_help", "<h3>exp() function</h3>\n"
"Returns exponential of an value.\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     exp(<i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; number.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     exp(1.0) &rarr; 2.71828182845905</p>\n"
"") );
  gFunctionHelpTexts.insert( "floor", QCoreApplication::translate( "function_help", "<h3>floor() function</h3>\n"
"Rounds a number downwards.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>floor(value)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>value</code> - a number.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>floor(4.9) &rarr; 4</code><br>\n"
"<code>floor(-4.9) &rarr; -5</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "format", QCoreApplication::translate( "function_help", "<h3>format() function</h3>\n"
"Format a string using supplied arguments. \n"
"\n"
"<h4>Syntax</h4>\n"
"<code>format('string', arg, [arg...n])</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string.  String with Qt QString place holders.  Use %1, %2, etc for placeholders. Placeholders can be repeated. \n"
"<br>\n"
"<code>arg [arg...n]</code> - any type. Any number of args. \n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>format('This %1 a %2','is', 'test') &rarr; This is a test</code><br>") );
  gFunctionHelpTexts.insert( "format_date", QCoreApplication::translate( "function_help", "<h3>format_date() function</h3>\n"
"Format a date type or string into a custom string format. Uses Qt data time format strings.  See <a href='http://qt-project.org/doc/qt-4.8/qdatetime.html#toString'>QDateTime::toString</a>\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>format_date('string', 'format_string')</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string. Date/Time/DateTime string.\n"
"<br>\n"
"<code>format_string</code> - is string. String template used to format the string.\n"
"\n"
"  <table>\n"
"    <thead>\n"
"      <tr>\n"
"        <th>Expression</th>\n"
"\n"
"        <th>Output</th>\n"
"      </tr>\n"
"    </thead>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>d</td>\n"
"\n"
"      <td>the day as number without a leading zero (1 to 31)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>dd</td>\n"
"\n"
"      <td>the day as number with a leading zero (01 to 31)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>ddd</td>\n"
"\n"
"      <td>the abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses <a href=\n"
"      \"qdate.html#shortDayName\">QDate::shortDayName</a>().</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>dddd</td>\n"
"\n"
"      <td>the long localized day name (e.g. 'Monday' to 'Sunday'). Uses <a href=\n"
"      \"qdate.html#longDayName\">QDate::longDayName</a>().</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>M</td>\n"
"\n"
"      <td>the month as number without a leading zero (1-12)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>MM</td>\n"
"\n"
"      <td>the month as number with a leading zero (01-12)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>MMM</td>\n"
"\n"
"      <td>the abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses <a href=\n"
"      \"qdate.html#shortMonthName\">QDate::shortMonthName</a>().</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>MMMM</td>\n"
"\n"
"      <td>the long localized month name (e.g. 'January' to 'December'). Uses <a href=\n"
"      \"qdate.html#longMonthName\">QDate::longMonthName</a>().</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>yy</td>\n"
"\n"
"      <td>the year as two digit number (00-99)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>yyyy</td>\n"
"\n"
"      <td>the year as four digit number</td>\n"
"    </tr>\n"
"  </table>\n"
"\n"
"  <p>These expressions may be used for the time part of the format string:</p>\n"
"\n"
"  <table>\n"
"    <thead>\n"
"      <tr>\n"
"        <th>Expression</th>\n"
"\n"
"        <th>Output</th>\n"
"      </tr>\n"
"    </thead>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>h</td>\n"
"\n"
"      <td>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>hh</td>\n"
"\n"
"      <td>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>H</td>\n"
"\n"
"      <td>the hour without a leading zero (0 to 23, even with AM/PM display)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>HH</td>\n"
"\n"
"      <td>the hour with a leading zero (00 to 23, even with AM/PM display)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>m</td>\n"
"\n"
"      <td>the minute without a leading zero (0 to 59)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>mm</td>\n"
"\n"
"      <td>the minute with a leading zero (00 to 59)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>s</td>\n"
"\n"
"      <td>the second without a leading zero (0 to 59)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>ss</td>\n"
"\n"
"      <td>the second with a leading zero (00 to 59)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>z</td>\n"
"\n"
"      <td>the milliseconds without leading zeroes (0 to 999)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>zzz</td>\n"
"\n"
"      <td>the milliseconds with leading zeroes (000 to 999)</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>AP or A</td>\n"
"\n"
"      <td>interpret as an AM/PM time. <i>AP</i> must be either \"AM\" or \"PM\".</td>\n"
"    </tr>\n"
"\n"
"    <tr valign=\"top\">\n"
"      <td>ap or a</td>\n"
"\n"
"      <td>Interpret as an AM/PM time. <i>ap</i> must be either \"am\" or \"pm\".</td>\n"
"    </tr>\n"
"  </table>\n"
"\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>format_date('2012-05-15','dd.mm.yyyy') &rarr; 15.05.2012</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "format_number", QCoreApplication::translate( "function_help", "<h3>format_number() function</h3>\n"
"Returns a number formatted with the locale separator for thousands. \n"
"Also truncates the number to the number of supplied places. \n"
"<h4>Syntax</h4>\n"
"<code>format_number(number,places)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>number</code> - is number. The number to be formatted.\n"
"<br>\n"
"<code>places</code> - is int. The number of decimal places to truncate the string\n"
"to.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>format_number(10000000.332,2) &rarr; 10,000,000.33</code>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "geomFromGML", QCoreApplication::translate( "function_help", "<h3>geomFromGML function</h3>\n"
"Returns a geometry from a GML representation of geometry\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>geomFromGML(text)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"text &rarr; GML representation of a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomFromGML( '<gml:LineString srsName=\"EPSG:4326\"><gml:coordinates>4,4 5,5 6,6</gml:coordinates></gml:LineString>') &rarr; returns a geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "geomFromWKT", QCoreApplication::translate( "function_help", "<h3>geomFromWKT function</h3>\n"
"Returns a geometry created from a Well-Known Text (WKT) representation.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>geomFromWKT(text)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"text &rarr; Well-Known Text (WKT) representation of a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomFromWKT( 'POINT(4 5)' ) &rarr; returns a geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "geomToWKT", QCoreApplication::translate( "function_help", "<h3>geomToWKT function</h3>\n"
"Returns the Well-Known Text (WKT) representation of the geometry without SRID metadata.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>geomToWKT(a)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomToWKT( $geometry ) &rarr; POINT(6 50)</pre>\n"
"") );
  gFunctionHelpTexts.insert( "getFeature", QCoreApplication::translate( "function_help", "<h3>getFeature function</h3>\n"
"Returns the first feature of a layer matching a given attribute value\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>getFeature( layer, attributeField, value )</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "hour", QCoreApplication::translate( "function_help", "<h3>hour() function</h3>\n"
"Extract the hour from a datetime or time, or the number of hours\n"
"from a <code>Interval</code>\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>hour(datetime)</code><br>\n"
"<code>hour(Interval)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>date</code> - is datetime or time. The date to extract the hour from.\n"
"<br>\n"
"<code>Interval</code> - is Interval. The Interval to return the number of hours from.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>hour('2012-07-22T13:24:57') &rarr; 13</code><br>\n"
"<code>hour(tointerval('3 hours')) &rarr; 3</code><br>\n"
"<code>hour(age('2012-07-22T13:00:00','2012-07-22T10:00:00')) &rarr; 3</code><br>\n"
"<code>hour(age('2012-01-01','2010-01-01')) &rarr; 17520</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "intersection", QCoreApplication::translate( "function_help", "<h3>intersection function</h3>\n"
"Returns a geometry that represents the shared portion of geometry a and geometry b.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>intersection( geometry a , geometry b)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geometry &rarr; geometry\n"
"geometry &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomToWKT( intersection( geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 )' ))  )   &rarr; returns LINESTRING(3 3, 4 4)</pre>\n"
"") );
  gFunctionHelpTexts.insert( "intersects", QCoreApplication::translate( "function_help", "<h3>intersects function</h3>\n"
"Returns 1 if the geometries spatially intersect (share any portion of space) and 0 if they don't.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>intersects( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"b &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> intersects( geomFromWKT( 'POINT(4 4)' ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ))    &rarr; returns 1</pre>\n"
"<pre> intersects( geomFromWKT( 'POINT(4 5)' ) , geomFromWKT( 'POINT(5 5)' ))             &rarr; returns 0</pre>\n"
"") );
  gFunctionHelpTexts.insert( "left", QCoreApplication::translate( "function_help", "<h3>left() function</h3>\n"
"Returns a substring that contains the <i>n</i> leftmost characters of the string.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>left(string, length)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string. The string.\n"
"<br>\n"
"<code>length</code> - is int. The number of characters from the left to return.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>left('Hello World',5) &rarr; 'Hello'</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "length", QCoreApplication::translate( "function_help", "<h3>length() function</h3>\n"
"Returns the length of a string.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     length(<i>string</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The String to count the length of.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     length('HELLO') &rarr; 5</p>\n"
"") );
  gFunctionHelpTexts.insert( "ln", QCoreApplication::translate( "function_help", "<h3>ln() function</h3>\n"
"Returns the value of the natural logarithm of the passed expression.\n"
"<br>\n"
"This function takes one argument.\n"
"<h4>Syntax</h4>\n"
"<code>ln(value)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>value</code> - any positive number.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>ln(1) &rarr; 0</code><br>\n"
"<code>ln(2.7182818284590452354) &rarr; 1</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "log", QCoreApplication::translate( "function_help", "<h3>log() function</h3>\n"
"Returns the value of the logarithm of the passed value and base.\n"
"<br>\n"
"This function takes two arguments.\n"
"<h4>Syntax</h4>\n"
"<code>log(base, value)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>base</code> - any positive number.<br>\n"
"<code>value</code> - any positive number.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>log(2, 32) &rarr; 5</code><br>\n"
"<code>log(0.5, 32) &rarr; -5</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "log10", QCoreApplication::translate( "function_help", "<h3>log10() function</h3>\n"
"Returns the value of the base 10 logarithm of the passed expression.\n"
"<br>\n"
"This function takes one argument.\n"
"<h4>Syntax</h4>\n"
"<code>log10(value)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>value</code> - any positive number.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>log10(1) &rarr; 0</code><br>\n"
"<code>log10(100) &rarr; 2</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "lower", QCoreApplication::translate( "function_help", "<h3>lower() function</h3>\n"
"Converts a string to lower case letters.\n"
"\n"
"<p><h4>  Syntax</h4>\n"
"     lower(<i>string</i>)</p>\n"
"\n"
"<p><h4>  Arguments</h4>\n"
"<i>  string</i> &rarr; is string.  The String to convert to lower case.</p>\n"
"\n"
"<p><h4>  Example</h4>\n"
"     lower('HELLO World') &rarr; 'hello world'</p>\n"
"") );
  gFunctionHelpTexts.insert( "lpad", QCoreApplication::translate( "function_help", "<h3>lpad() function</h3>\n"
"Returns a string with supplied width padded\n"
"using the fill character.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>lpad(string, length, fill)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string. The string.\n"
"<br>\n"
"<code>length</code> - is int. The length of the new string.\n"
"<br>\n"
"<code>fill</code> - is char. The character to padd the remaining space with. \n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>lpad('Hello', 10, 'x') &rarr; 'Helloxxxxx'</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "max", QCoreApplication::translate( "function_help", "<h3>max() function</h3>\n"
"Returns the largest value in a set of values.\n"
"\n"
"<h4>Syntax</h4>\n"
"     max(<i>value<i>[,<i>value</i>...])\n"
"\n"
"<h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  value</i> &rarr; a number.<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     max(2,10.2,5.5) &rarr; 10.2\n"
"") );
  gFunctionHelpTexts.insert( "min", QCoreApplication::translate( "function_help", "<h3>min() function</h3>\n"
"Returns the smallest value in a set of values.\n"
"\n"
"<h4>Syntax</h4>\n"
"     min(<i>value<i>[,<i>value</i>...])\n"
"\n"
"<h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  value</i> &rarr; a number.<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     min(20.5,10,6.2) &rarr; 6.2\n"
"") );
  gFunctionHelpTexts.insert( "minute", QCoreApplication::translate( "function_help", "<h3>minute() function</h3>\n"
"Extract the minute from a datetime or time, or the number of minutes\n"
"from a <code>Interval</code>\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>minute(datetime)</code><br>\n"
"<code>minute(Interval)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>date</code> - is datetime or time. The date to extract the minute from.\n"
"<br>\n"
"<code>Interval</code> - is Interval. The Interval to return the number of minutes from.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>minute('2012-07-22T13:24:57') &rarr; 24</code><br>\n"
"<code>minute(tointerval('3 minutes')) &rarr; 3</code><br>\n"
"<code>minute(age('2012-07-22T00:20:00','2012-07-22T00:00:00')) &rarr; 20</code><br>\n"
"<code>minute(age('2012-01-01','2010-01-01')) &rarr; 1051200</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "month", QCoreApplication::translate( "function_help", "<h3>month() function</h3>\n"
"Extract the month part from a date, or the number of months\n"
"from a <code>Interval</code>\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>month(date)</code><br>\n"
"<code>month(Interval)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>date</code> - is date or datetime. The date to extract the month from.\n"
"<br>\n"
"<code>Interval</code> - is Interval. The Interval to return the number of months from.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>month('2012-05-12') &rarr; 05</code><br>\n"
"<code>month(tointerval('3 months')) &rarr; 3</code><br>\n"
"<code>month(age('2012-01-01','2010-01-01')) &rarr; 4.033...</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "overlaps", QCoreApplication::translate( "function_help", "<h3>overlaps function</h3>\n"
"Returns 1 if the geometries share space, are of the same dimension, but are not completely contained by each other.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>overlaps( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"b &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> overlaps( geomFromWKT( 'LINESTRING(3 5 , 4 4 , 5 5 , 5 3)'  ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ))   &rarr; returns 1</pre>\n"
"<pre> overlaps( geomFromWKT( 'LINESTRING(0 0 , 1 1)'  ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ))    &rarr; returns 0</pre>\n"
"") );
  gFunctionHelpTexts.insert( "ramp_color", QCoreApplication::translate( "function_help", "\n"
"<h3>ramp_color() function</h3>\n"
"Returns a string representing a color from a color ramp. \n"
"\n"
"<p><h4>Syntax</h4>\n"
"     ramp_color(<i>ramp_name,value</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  ramp_name</i> &rarr; the name of the color ramp as a string, for example 'Spectral'.<br>\n"
"<i>  value</i> &rarr; the position on the ramp to select the color from as a real number between 0 and 1.<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     ramp_color('Spectral',0.3) &rarr; '253,190,115,255'</p>\n"
"\n"
"<p><h4>Note:</h4>\n"
"The color ramps available vary between QGIS installations.  This function\n"
"may not give the expected results if you move your Quantum project.\n"
"</p>\n"
"") );
  gFunctionHelpTexts.insert( "rand", QCoreApplication::translate( "function_help", "<h3>rand() function</h3>\n"
"Returns a random integer within the range specified by the minimum and \n"
"maximum argument (inclusive).\n"
"<br>\n"
"This function takes two arguments.\n"
"<h4>Syntax</h4>\n"
"<code>rand(min, max)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>min</code> - an integer representing the smallest possible random number desired.<br>\n"
"<code>max</code> - an integer representing the largest possible random number desired.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>rand(1, 10) &rarr; 8</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "randf", QCoreApplication::translate( "function_help", "<h3>randf() function</h3>\n"
"Returns a random float within the range specified by the minimum and \n"
"maximum argument (inclusive).\n"
"<br>\n"
"This function takes two arguments.\n"
"<h4>Syntax</h4>\n"
"<code>randf(min, max)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>min</code> - a float representing the smallest possible random number desired.<br>\n"
"<code>max</code> - a float representing the largest possible random number desired.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>randf(1, 10) &rarr; 4.59258286403147</code><br>\n"
"") );
  gFunctionHelpTexts.insert( "regexp_match", QCoreApplication::translate( "function_help", "<h3>regexp_match() function</h3>\n"
"Returns true if any part of a string matches the supplied regular expression.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     regexp_match(<i>string,regex</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The string to test against the regular expression.<br>\n"
"<i>  regex</i> &rarr; is string.  The regular expression to test against. Backslash characters must be double escaped (eg \"&#92;&#92;s\" to match a white space character). Non-greedy regular expressions are not supported.<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     regexp_match('QGIS ROCKS','&#92;&#92;sROCKS') &rarr; 1</p>\n"
"") );
  gFunctionHelpTexts.insert( "regexp_replace", QCoreApplication::translate( "function_help", "<h3>regexp_replace() function</h3>\n"
"Returns a string with the supplied regular expression replaced.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     regexp_replace(<i>string,regex,after</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The start string.<br>\n"
"<i>  regex</i> &rarr; is string.  The regular expression to replace. Backslash characters must be double escaped (eg \"&#92;&#92;s\" to match a white space character). Non-greedy regular expressions are not supported.<br>\n"
"<i>  after</i> &rarr; is string.  The string that will replace any matching occurences of the supplied regular expression. Captured groups can be inserted into the replacement string using &#92;&#92;1, &#92;&#92;2, etc. <br></p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     regexp_replace('QGIS SHOULD ROCK','&#92;&#92;sSHOULD&#92;&#92;s',' DOES ') &rarr; 'QGIS DOES ROCK'</p>\n"
"") );
  gFunctionHelpTexts.insert( "regexp_substr", QCoreApplication::translate( "function_help", "<h3>regexp_substr() function</h3>\n"
"Returns the portion of a string which matches a supplied regular expression.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     regexp_substr(<i>string,regex</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The input string.<br>\n"
"<i>  regex</i> &rarr; is string.  The regular expression to match against. Backslash characters must be double escaped (eg \"&#92;&#92;s\" to match a white space character). Non-greedy regular expressions are not supported.<br>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     regexp_substr('abc123','(&#92;&#92;d+)') &rarr; '123'</p>\n"
"") );
  gFunctionHelpTexts.insert( "replace", QCoreApplication::translate( "function_help", "<h3>replace() function</h3>\n"
"Returns a string with the the supplied string replaced.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     replace(<i>string,before,after</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The start string.<br>\n"
"<i>  before</i> &rarr; is string.  The string to replace.<br>\n"
"<i>  after</i> &rarr; is string.  The string that will replace <i>before</i><br></p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     replace('QGIS SHOULD ROCK','SHOULD','DOES') &rarr; 'QGIS DOES ROCK'</p>\n"
"") );
  gFunctionHelpTexts.insert( "right", QCoreApplication::translate( "function_help", "<h3>right() function</h3>\n"
"Returns a substring that contains the <i>n</i> rightmost characters of the string.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>right(string, pos)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string. The string.\n"
"<br>\n"
"<code>length</code> - is int. The number of characters from the right to return.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>right('Hello World',5) &rarr; 'World'</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "round", QCoreApplication::translate( "function_help", "<h3>round() function</h3>\n"
"Rounds a number to number of decimal places.\n"
"<br>\n"
"This function can take one or two arguments depending on what is needed.\n"
"<h4>Syntax</h4>\n"
"<code>round(decimal,places)</code><br>\n"
"<code>round(decimal)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>decimal</code> - is decimal. The decimal number to be rounded.\n"
"<br>\n"
"<code>places</code> - is int. The number of places to round decimal too. Can be negative.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>round(1234.567, 2 ) &rarr; 1234.57</code><br>\n"
"use <code>round(decimal)</code> to round to the nearest integer<br>\n"
"<code>round(1234.567) &rarr; 1235</code><br>\n"
"\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "rpad", QCoreApplication::translate( "function_help", "<h3>rpad() function</h3>\n"
"Returns a string with supplied width padded\n"
"using the fill character.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>rpad(string, width, fill)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string. The string.\n"
"<br>\n"
"<code>width</code> - is int. The length of the new string.\n"
"<br>\n"
"<code>fill</code> - is char. The character to padd the remaining space with. \n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>rpad('Hello', 10, 'x') &rarr; 'xxxxxHello'</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "scale_exp", QCoreApplication::translate( "function_help", "<h3>scale_exp() function</h3>\n"
"Transforms a given value from an input domain to an output range using an exponential curve. This function can be used to ease values in or out \n"
"of the specified output range.   \n"
"\n"
"<p><h4>Syntax</h4>\n"
"     scale_exp(<i>val</i>,<i>domain_min</i>,<i>domain_max</i>,<i>range_min</i>,<i>range_max</i>,<i>exponent</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  val</i> &rarr; is a value in the input domain. The function will return a corresponding scaled value in the output range.<br>\n"
"<i>  domain_min, domain_max</i> &rarr; specify the input domain, the smallest and largest values the input <i>val</i> should take.<br>\n"
"<i>  range_min, range_max</i> &rarr; specify the output range, the smallest and largest values which should be output by the function.<br>\n"
"<i>  exponent</i> &rarr; a positive value (greater than 0), which dictates the way input values are mapped to the output range. Large exponents will cause the output values to 'ease in', starting slowly before\n"
"accelerating as the input values approach the domain maximum. Smaller exponents (less than 1) will cause output values to 'ease out', where the mapping starts quickly but slows as it approaches the domain maximum.<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<b>Easing in, using an exponent of 2:</b><br>\n"
"     scale_exp(5,0,10,0,100,2) &rarr; 25<br>\n"
"     scale_exp(7.5,0,10,0,100,2) &rarr; 56.25<br>\n"
"     scale_exp(9.5,0,10,0,100,2) &rarr; 90.25<br>               \n"
"     <br>\n"
"<b>Easing out, using an exponent of 0.5:</b><br>          \n"
"     scale_exp(3,0,10,0,100,0.5) &rarr; 54.772<br>\n"
"     scale_exp(6,0,10,0,100,0.5) &rarr; 77.459<br>\n"
"     scale_exp(9,0,10,0,100,0.5) &rarr; 94.868<br>          \n"
"     \n"
"     \n"
"") );
  gFunctionHelpTexts.insert( "scale_linear", QCoreApplication::translate( "function_help", "<h3>scale_linear() function</h3>\n"
"Transforms a given value from an input domain to an output range using linear interpolation. \n"
"\n"
"<p><h4>Syntax</h4>\n"
"     scale_linear(<i>val</i>,<i>domain_min</i>,<i>domain_max</i>,<i>range_min</i>,<i>range_max</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  val</i> &rarr; is a value in the input domain. The function will return a corresponding scaled value in the output range.<br>\n"
"<i>  domain_min, domain_max</i> &rarr; specify the input domain, the smallest and largest values the input <i>val</i> should take.<br>\n"
"<i>  range_min, range_max</i> &rarr; specify the output range, the smallest and largest values which should be output by the function.<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     scale_linear(5,0,10,0,100) &rarr; 50<br>\n"
"     scale_linear(0.2,0,1,0,360) &rarr; 72 <i>(eg, scaling a value between 0 and 1 to an angle between 0 and 360)</i><br>\n"
"     scale_linear(1500,1000,10000,9,20) &rarr; 10.22 <i>(eg, scaling a population which varies between 1000 and 10000 to a font size between 9 and 20)</i><br>\n"
"     \n"
"     \n"
"") );
  gFunctionHelpTexts.insert( "second", QCoreApplication::translate( "function_help", "<h3>second() function</h3>\n"
"Extract the seconds from a datetime or time, or the number of seconds\n"
"from a <code>Interval</code>\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>second(datetime)</code><br>\n"
"<code>second(Interval)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>date</code> - is datetime or time. The date to extract the second from.\n"
"<br>\n"
"<code>Interval</code> - is Interval. The Interval to return the number of seconds from.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>second('2012-07-22T13:24:57') &rarr; 57</code><br>\n"
"<code>second(tointerval('3 seconds')) &rarr; 3</code><br>\n"
"<code>second(age('2012-07-22T00:20:00','2012-07-22T00:00:00')) &rarr; 1200</code><br>\n"
"<code>second(age('2012-01-01','2010-01-01')) &rarr; 63072000</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "sin", QCoreApplication::translate( "function_help", "<h3>sin() function</h3>\n"
"Returns sinus of an angle.\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     sin(<i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; angle in radians.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     sin(1.571) &rarr; 0.999999682931835</p>\n"
"") );
  gFunctionHelpTexts.insert( "sqrt", QCoreApplication::translate( "function_help", "<h3>sqrt() function</h3>\n"
"Returns square root of a value\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     sqrt(<i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; number.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     sqrt(9) &rarr; 3</p>\n"
"") );
  gFunctionHelpTexts.insert( "strpos", QCoreApplication::translate( "function_help", "<h3>strpos() function</h3>\n"
"Return the index of a regular expression in a string.\n"
"\n"
"<h4>Syntax</h4>\n"
"     strpos(<i>haystack</i>, <i>needle</i>)\n"
"<br><br>\n"
"Returns -1 if the expression isn't found.\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  haystack</i> &rarr; is string.  The string that is to be searched.<br>\n"
"<i>  needle</i> &rarr; is string.  The regular expression to look for.<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     strpos('HELLO WORLD','WORLD') &rarr; 6<br>\n"
"     strpos('HELLO WORLD','GOODBYE') &rarr; -1<br>\n"
"") );
  gFunctionHelpTexts.insert( "substr", QCoreApplication::translate( "function_help", "<h3>substr() function</h3>\n"
"Return a part of a string\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     substr(<i>string,startpos,length</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The full string.<br>\n"
"<i>  startpos</i> &rarr; is number.  The start position to extract from.<br>\n"
"<i>  length</i> &rarr; is number.  The length of the string to extract.<br></p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     substr('HELLO WORLD',3,5) &rarr; 'LLO W'</p>\n"
"") );
  gFunctionHelpTexts.insert( "symDifference", QCoreApplication::translate( "function_help", "<h3>symDifference function</h3>\n"
"Returns a geometry that represents the portions of a and b that do not intersect.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>symDifference( geometry a, geometry b)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geometry &rarr; geometry\n"
"geometry &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomToWKT( symDifference(  geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ) , geomFromWKT( 'LINESTRING(3 3 , 8 8)' ))   )   &rarr; returns LINESTRING(5 5, 8 8)</pre>\n"
"") );
  gFunctionHelpTexts.insert( "tan", QCoreApplication::translate( "function_help", "<h3>tan() function</h3>\n"
"Returns tangent of an angle.\n"
"\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     tan(<i>real</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<i>real</i> &rarr; angle in radians.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"     tan(1.0) &rarr; 1.5574077246549</p>\n"
"") );
  gFunctionHelpTexts.insert( "title", QCoreApplication::translate( "function_help", "<h3>title() function</h3>\n"
"Converts all words of a string to title case (all words lower case with leading\n"
"capital letter).\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     title(<i>string</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The string to convert to title case.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     upper('hello WOrld') &rarr; 'Hello World'</p>\n"
"") );
  gFunctionHelpTexts.insert( "todate", QCoreApplication::translate( "function_help", "<h3>todate() function</h3>\n"
"Convert a string into Qt data type.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>todate('string')</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string in Qt date format.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>todate('2012-05-04') &rarr; 2012-05-04</code><br>") );
  gFunctionHelpTexts.insert( "todatetime", QCoreApplication::translate( "function_help", "<h3>todatetime() function</h3>\n"
"Convert a string into Qt data time type.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>todatetime('string')</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string in Qt date time format.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>todatetime('2012-05-04 12:50:00') &rarr; 2012-05-04T12:50:00</code><br>") );
  gFunctionHelpTexts.insert( "toint", QCoreApplication::translate( "function_help", "<h3>toint() function</h3>\n"
"Converts a string to integer number. Nothing changed if a value cannot be converted to integer (e.g '123asd' is invalid).\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     toint(<i>string</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The String to convert to integer number.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     toint('123') &rarr; 123</p>\n"
"") );
  gFunctionHelpTexts.insert( "tointerval", QCoreApplication::translate( "function_help", "<h3>tointerval() function</h3>\n"
"Converts a string to a interval type.  Can be used to take days, hours, month, etc off a date. \n"
"\n"
"<h4>Syntax</h4>\n"
"<code>tointerval('string')</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string. Format {n} days {n} hours {n} months\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>todatetime('2012-05-05 12:00:00') - tointerval('1 day 2 hours') &rarr; 2012-05-04T10:00:00</code><br>") );
  gFunctionHelpTexts.insert( "toreal", QCoreApplication::translate( "function_help", "<h3>toreal() function</h3>\n"
"Converts a string to real number. Nothing changed if a value cannot be converted to real (e.g '123.56asd' is invalid). Numbers are rounded after saving changes if the precision is smaller than the result of the conversion.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     toreal(<i>string</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The String to convert to real number.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     toreal('123.45') &rarr; 123.45</p>\n"
"") );
  gFunctionHelpTexts.insert( "tostring", QCoreApplication::translate( "function_help", "<h3>tostring() function</h3>\n"
"Converts a number to string.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     tostring(<i>number</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>number</i> &rarr; is integer or real.  The number to convert to string.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     tostring(123) &rarr; '123'</p>\n"
"") );
  gFunctionHelpTexts.insert( "totime", QCoreApplication::translate( "function_help", "<h3>totime() function</h3>\n"
"Convert a string into Qt time type.\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>totime('string')</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>string</code> - is string in Qt time format.\n"
"<br>\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>totime('12:30:01') &rarr; 12:30:01</code><br>") );
  gFunctionHelpTexts.insert( "touches", QCoreApplication::translate( "function_help", "<h3>touches function</h3>\n"
"Returns 1 if the geometries have at least one point in common, but their interiors do not intersect.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>touches( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"b &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> touches( geomFromWKT( 'LINESTRING(5 3 , 4 4)'  ) , geomFromWKT( 'LINESTRING(3 3 , 4 4 , 5 5)' ))    &rarr; returns 1</pre>\n"
"<pre> touches( geomFromWKT( 'POINT(4 4)' ) , geomFromWKT( 'POINT(5 5)' ))                     &rarr; returns 0</pre>\n"
"") );
  gFunctionHelpTexts.insert( "trim", QCoreApplication::translate( "function_help", "<h3>trim() function</h3>\n"
"Removes all leading and trailing whitespace (spaces, tabs, etc) from a string.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     trim(<i>string</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string. The string to trim.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     trim('   hello world    ') &rarr; 'hello world'</p>\n"
"") );
  gFunctionHelpTexts.insert( "union", QCoreApplication::translate( "function_help", "<h3>union function</h3>\n"
"Returns a geometry that represents the point set union of the geometries.\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>union( a, b )</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"a &rarr; geometry\n"
"b &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> geomToWKT( union( geomFromWKT( 'POINT(4 4)' ) , geomFromWKT( 'POINT(5 5)' ))  )   &rarr; returns MULTIPOINT(4 4, 5 5)</pre>\n"
"") );
  gFunctionHelpTexts.insert( "upper", QCoreApplication::translate( "function_help", "<h3>upper() function</h3>\n"
"Converts a string to upper case letters.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     upper(<i>string</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The String to convert to upper case.</p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     upper('hello WOrld') &rarr; 'HELLO WORLD'</p>\n"
"") );
  gFunctionHelpTexts.insert( "week", QCoreApplication::translate( "function_help", "<h3>week() function</h3>\n"
"Extract the week number from a date, or the number of weeks\n"
"from a <code>Interval</code>\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>week(date)</code><br>\n"
"<code>week(Interval)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>date</code> - is date or datetime. The date to extract the week from.\n"
"<br>\n"
"<code>Interval</code> - is Interval. The Interval to return the number of weeks from.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>week('2012-05-12') &rarr; 19</code><br>\n"
"<code>week(tointerval('3 weeks')) &rarr; 3</code><br>\n"
"<code>week(age('2012-01-01','2010-01-01')) &rarr; 104.285...</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "within", QCoreApplication::translate( "function_help", "<h3>within function</h3>\n"
"Returns 1 if the geometry a is completely inside geometry b\n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>within( geometry a , geometry b)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geometry &rarr; geometry\n"
"geometry &rarr; geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> within( geomFromWKT( 'POINT( 0.5 0.5 )') , geomFromWKT('POLYGON((0 0 , 0 1 , 1 1 , 1 0 , 0 0 ))' ) )    &rarr; returns 1</pre>\n"
"<pre> within( geomFromWKT( 'POINT( 5 5 )') , geomFromWKT('POLYGON((0 0 , 0 1 , 1 1 , 1 0 , 0 0 ))' ) )        &rarr; returns 0</pre>\n"
"") );
  gFunctionHelpTexts.insert( "wordwrap", QCoreApplication::translate( "function_help", "<h3>wordwrap() function</h3>\n"
"Returns a string wrapped to a maximum/minimum number of characters.\n"
"\n"
"<p><h4>Syntax</h4>\n"
"     wordwrap(<i>string,wrap_length[,delimiter_string]</i>)</p>\n"
"\n"
"<p><h4>Arguments</h4>\n"
"<!-- List args for functions here-->\n"
"<i>  string</i> &rarr; is string.  The string to be wrapped.<br>\n"
"<i>  wrap_length</i> &rarr; is number.  If positive, the number represents the ideal maximum number of characters to wrap; if negative, the number represents the minimum number of characters to wrap.<br>\n"
"<i>  delimiter_string</i> &rarr; is string.  The delimiter string to wrap to a new line (<u>optional</u>).<br></p>\n"
"\n"
"<p><h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"     wordwrap('UNIVERSITY OF QGIS',13) &rarr; 'UNIVERSITY OF&#92;nQGIS'<br>\n"
"     wordwrap('UNIVERSITY OF QGIS',-3) &rarr; 'UNIVERSITY&#92;nOF QGIS'</p>\n"
"") );
  gFunctionHelpTexts.insert( "xat", QCoreApplication::translate( "function_help", "<h3>xat() function</h3>\n"
"Retrieves a x coordinate of the current feature\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>xat(i)</code>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>i<code> - is int. index of point of a line (indices start at 0; negative values apply to the last index).\n"
"\n"
"<h4>Example</h4>\n"
"<pre>xat(1) &rarr; 5</pre>\n"
"") );
  gFunctionHelpTexts.insert( "xmax", QCoreApplication::translate( "function_help", "<h3>xmax function</h3>\n"
"Returns the maximum x coordinate of a geometry. Calculations are in the Spatial Reference System of this Geometry. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>xmax(geom)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geom &rarr; a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> xmax($geometry) &rarr; returns maximum x coordinate of $geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "xmin", QCoreApplication::translate( "function_help", "<h3>xmin function</h3>\n"
"Returns the minimum x coordinate of a geometry. Calculations are in the Spatial Reference System of this Geometry. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>xmin(geom)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geom &rarr; a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> xmin($geometry) &rarr; returns minimum x coordinate of $geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "yat", QCoreApplication::translate( "function_help", "<h3>yat() function</h3>\n"
"Retrieves a y coordinate of the current feature\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>yat(i)</code>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>i<code> - is int. index of point of a line (indices start at 0; negative values apply to the last index).\n"
"\n"
"<h4>Example</h4>\n"
"<pre>yat(1) &rarr; 5</pre>\n"
"") );
  gFunctionHelpTexts.insert( "year", QCoreApplication::translate( "function_help", "<h3>year() function</h3>\n"
"Extract the year part from a date, or the number of years\n"
"from a <code>Interval</code>\n"
"\n"
"<h4>Syntax</h4>\n"
"<code>year(date)</code><br>\n"
"<code>year(Interval)</code><br>\n"
"\n"
"<h4>Arguments</h4>\n"
"<code>date</code> - is date or datetime. The date to extract the year from.\n"
"<br>\n"
"<code>Interval</code> - is Interval. The Interval to return the number of years from.\n"
"\n"
"<h4>Example</h4>\n"
"<!-- Show example of function.-->\n"
"<code>year('2012-05-12') &rarr; 2012</code><br>\n"
"<code>year(tointerval('3 Years')) &rarr; 3</code><br>\n"
"<code>year(age('2012-01-01','2010-01-01')) &rarr; 1.9986..</code><br>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "ymax", QCoreApplication::translate( "function_help", "<h3>ymax function</h3>\n"
"Returns the maximum y coordinate of a geometry. Calculations are in the Spatial Reference System of this Geometry. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>ymax(geom)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geom &rarr; a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> ymax($geometry) &rarr; returns maximum y coordinate of $geometry</pre>\n"
"\n"
"") );
  gFunctionHelpTexts.insert( "ymin", QCoreApplication::translate( "function_help", "<h3>ymin function</h3>\n"
"Returns the minimum y coordinate of a geometry. Calculations are in the Spatial Reference System of this Geometry. \n"
"\n"
"<h4>Syntax</h4>\n"
"<pre>ymin(geom)</pre>\n"
"\n"
"<h4>Arguments</h4>\n"
"geom &rarr; a geometry\n"
"\n"
"<h4>Example</h4>\n"
"<pre> ymin($geometry) &rarr; returns minimum y coordinate of $geometry</pre>\n"
"\n"
"") );
}
